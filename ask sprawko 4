// jeden bufor 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;  // rozmiar tablicy
    double *tab = new double[n];  // tworzenie tablicy dynamicznej

    for (int i = 0; i < n; ++i) tab[i] = 0.0625;  // wypełnianie tablicy

    double time;  // zmienne dla pomiaru czasu
    double s1 = 0.0;  // bufor dla sumy wszystkich elementów tablicy

    time = omp_get_wtime();  // pomiar czasu - start

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];  // dodawanie do bufora
        }
    }

    time = omp_get_wtime() - time;  // pomiar czasu - stop

    std::cout << std::fixed;
    std::cout << "1. suma = " << std::setprecision(30) << s1 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;  // kasowanie tablicy
    return 0;
}
//dwa bufory 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;
    double *tab = new double[n];

    for (int i = 0; i < n; ++i) tab[i] = 0.0625;

    double time;
    double s1 = 0.0, s2 = 0.0;  // dwa bufory

    time = omp_get_wtime();

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];  // dodawanie do drugiego bufora
        }
    }

    time = omp_get_wtime() - time;

    std::cout << std::fixed;
    std::cout << "2. suma = " << std::setprecision(30) << s1 + s2 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;
    return 0;
}
//4 bufory 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;
    double *tab = new double[n];

    for (int i = 0; i < n; ++i) tab[i] = 0.0625;

    double time;
    double s1 = 0.0, s2 = 0.0, s3 = 0.0, s4 = 0.0;  // cztery bufory

    time = omp_get_wtime();

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];
            s3 += tab[i];
            s4 += tab[i];  // dodawanie do czwartego bufora
        }
    }

    time = omp_get_wtime() - time;

    std::cout << std::fixed;
    std::cout << "3. suma = " << std::setprecision(30) << s1 + s2 + s3 + s4 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;
    return 0;
}
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;  // rozmiar tablicy
    double *tab = new double[n];  // tworzenie tablicy dynamicznej

    for (int i = 0; i < n; ++i) tab[i] = 0.0625;  // wypełnianie tablicy

    double time;
    double s1 = 0.0, s2 = 0.0, s3 = 0.0, s4 = 0.0, s5 = 0.0, s6 = 0.0, s7 = 0.0, s8 = 0.0;  // 8 buforów

    time = omp_get_wtime();  // pomiar czasu - start

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];
            s3 += tab[i];
            s4 += tab[i];
            s5 += tab[i];
            s6 += tab[i];
            s7 += tab[i];
            s8 += tab[i];  // dodawanie do ósmego bufora
        }
    }

    time = omp_get_wtime() - time;  // pomiar czasu - stop

    std::cout << std::fixed;
    std::cout << "8. suma = " << std::setprecision(30) << s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;  // kasowanie tablicy
    return 0;
}
//16 buforow 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;  // rozmiar tablicy
    double *tab = new double[n];  // tworzenie tablicy dynamicznej

    for (int i = 0; i < n; ++i) tab[i] = 0.0625;  // wypełnianie tablicy

    double time;
    double s1 = 0.0, s2 = 0.0, s3 = 0.0, s4 = 0.0, s5 = 0.0, s6 = 0.0, s7 = 0.0, s8 = 0.0;
    double s9 = 0.0, s10 = 0.0, s11 = 0.0, s12 = 0.0, s13 = 0.0, s14 = 0.0, s15 = 0.0, s16 = 0.0;  // 16 buforów

    time = omp_get_wtime();  // pomiar czasu - start

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];
            s3 += tab[i];
            s4 += tab[i];
            s5 += tab[i];
            s6 += tab[i];
            s7 += tab[i];
            s8 += tab[i];
            s9 += tab[i];
            s10 += tab[i];
            s11 += tab[i];
            s12 += tab[i];
            s13 += tab[i];
            s14 += tab[i];
            s15 += tab[i];
            s16 += tab[i];  // dodawanie do szesnastego bufora
        }
    }

    time = omp_get_wtime() - time;  // pomiar czasu - stop

    std::cout << std::fixed;
    std::cout << "16. suma = " << std::setprecision(30) << s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;  // kasowanie tablicy
    return 0;
}
// zadanie 3 
// 1 bufor 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;  // rozmiar tablicy
    double *tab = new double[n];  // tworzenie tablicy dynamicznej

    // Nowa inicjalizacja tablicy
    for (int i = 0; i < n; ++i) tab[i] = 0.1;  // zmieniona wartość

    double time;
    double s1 = 0.0;  // bufor dla sumy wszystkich elementów tablicy

    time = omp_get_wtime();  // pomiar czasu - start

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];  // dodawanie do bufora
        }
    }

    time = omp_get_wtime() - time;  // pomiar czasu - stop

    std::cout << std::fixed;
    std::cout << "1. suma = " << std::setprecision(30) << s1 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;  // kasowanie tablicy
    return 0;
}
// 2 bufory 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;  // rozmiar tablicy
    double *tab = new double[n];  // tworzenie tablicy dynamicznej

    // Nowa inicjalizacja tablicy
    for (int i = 0; i < n; ++i) tab[i] = 0.1;  // zmieniona wartość

    double time;
    double s1 = 0.0, s2 = 0.0;  // dwa bufory

    time = omp_get_wtime();  // pomiar czasu - start

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];  // dodawanie do drugiego bufora
        }
    }

    time = omp_get_wtime() - time;  // pomiar czasu - stop

    std::cout << std::fixed;
    std::cout << "2. suma = " << std::setprecision(30) << s1 + s2 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;  // kasowanie tablicy
    return 0;
}
// 4 bufory 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;  // rozmiar tablicy
    double *tab = new double[n];  // tworzenie tablicy dynamicznej

    // Nowa inicjalizacja tablicy
    for (int i = 0; i < n; ++i) tab[i] = 0.1;  // zmieniona wartość

    double time;
    double s1 = 0.0, s2 = 0.0, s3 = 0.0, s4 = 0.0;  // cztery bufory

    time = omp_get_wtime();  // pomiar czasu - start

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];
            s3 += tab[i];
            s4 += tab[i];  // dodawanie do czwartego bufora
        }
    }

    time = omp_get_wtime() - time;  // pomiar czasu - stop

    std::cout << std::fixed;
    std::cout << "3. suma = " << std::setprecision(30) << s1 + s2 + s3 + s4 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;  // kasowanie tablicy
    return 0;
}
// 8 buforow 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;
    double *tab = new double[n];

    for (int i = 0; i < n; ++i) tab[i] = 0.1;

    double time;
    double s1 = 0.0, s2 = 0.0, s3 = 0.0, s4 = 0.0, s5 = 0.0, s6 = 0.0, s7 = 0.0, s8 = 0.0;

    time = omp_get_wtime();

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];
            s3 += tab[i];
            s4 += tab[i];
            s5 += tab[i];
            s6 += tab[i];
            s7 += tab[i];
            s8 += tab[i];
        }
    }

    time = omp_get_wtime() - time;

    std::cout << std::fixed;
    std::cout << "4. suma = " << std::setprecision(30) << s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;
    return 0;
}
// 16 buforow 
#include <iostream>
#include <iomanip>
#include <omp.h>

int main() {
    const int n = 1024;
    double *tab = new double[n];

    for (int i = 0; i < n; ++i) tab[i] = 0.1;

    double time;
    double s1 = 0.0, s2 = 0.0, s3 = 0.0, s4 = 0.0, s5 = 0.0, s6 = 0.0, s7 = 0.0, s8 = 0.0;
    double s9 = 0.0, s10 = 0.0, s11 = 0.0, s12 = 0.0, s13 = 0.0, s14 = 0.0, s15 = 0.0, s16 = 0.0;

    time = omp_get_wtime();

    for (int t = 0; t < n * n; ++t) {
        for (int i = 0; i < n; ++i) {
            s1 += tab[i];
            s2 += tab[i];
            s3 += tab[i];
            s4 += tab[i];
            s5 += tab[i];
            s6 += tab[i];
            s7 += tab[i];
            s8 += tab[i];
            s9 += tab[i];
            s10 += tab[i];
            s11 += tab[i];
            s12 += tab[i];
            s13 += tab[i];
            s14 += tab[i];
            s15 += tab[i];
            s16 += tab[i];
        }
    }

    time = omp_get_wtime() - time;

    std::cout << std::fixed;
    std::cout << "16. suma = " << std::setprecision(30) << s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16 << " ";
    std::cout << "czas wykonania = " << std::setprecision(3) << time << std::endl;

    delete[] tab;
    return 0;
}
