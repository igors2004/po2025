#include <iostream>
#include <stdlib.h>
#include <omp.h>
#include "f1.h"
#include "f2.h"
#include "f3.h"
#include "f4.h"
#include <immintrin.h> // Dodajemy do obsługi AVX-512

int main() {
    const int n = 1024*1024*1024;
    float *t0 = (float*)aligned_alloc(64, n * sizeof(float));
    float *t1 = (float*)aligned_alloc(64, n * sizeof(float));
    float *t2 = (float*)aligned_alloc(64, n * sizeof(float));

    // Inicjalizowanie tablic t0, t1 i t2
    for (int i = 0; i < n; ++i) {
        t0[i] = i * 1.0f;
        t1[i] = i * 3.0f;
        t2[i] = 0.0f;
    }

    double time;
    time = omp_get_wtime();

    // Przekształcamy pętlę na operację SIMD
    #pragma omp parallel for
    for (int i = 0; i < n; i += 8) {  // Przechodzimy po 8 elementach na raz
        // Załaduj 8 elementów do rejestrów AVX-512
        __m512d vec_t0 = _mm512_loadu_pd((double*)&t0[i]);
        __m512d vec_t1 = _mm512_loadu_pd((double*)&t1[i]);
        __m512d vec_t2 = _mm512_loadu_pd((double*)&t2[i]);

        // Dodajemy wektory
        avx512_add(vec_t0, vec_t1, vec_t2);

        // Zapisujemy wynik z powrotem do tablicy t2
        _mm512_storeu_pd((double*)&t2[i], vec_t2);
    }

    time = omp_get_wtime() - time;
    std::cout << time << " czas wykonania obl." << std::endl;

    // Zwolnienie pamięci
    free(t0);
    free(t1);
    free(t2);

    return 0;
}
